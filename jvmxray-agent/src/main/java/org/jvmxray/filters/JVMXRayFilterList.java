package org.jvmxray.filters;

import org.jvmxray.task.FilterActions;

import java.util.ArrayList;
import java.util.Iterator;

/**
 * Used by the framework to iterate over a list of FilterDomainRules.
 * This list contains a specified filter hander (e.g., NullFilter) for
 * each type of event specified in configuration.  Keep in mind,
 * events received without matching configuration do not include
 * a filter handler.  Simply, these are events generated by the virtual
 * machine that the user has not specified any specific filter, or
 * unconfigured.  In this case we return <code>FilterActions.DENY</code>
 * as the default.  This is not to be confused with default filter
 * actions, which control white listing vs black listing approach to
 * defining filter actions.
 * <pre>
 * FILTERING
 * - Filter rules are processed for event matches in order, jvmxyray.filterN.*
 * - Filter specified in configuration matches an events Event Type, FilterActions type
 *     is returned as configured.  On no match, rule returns FilterAction.NEUTRAL.
 * - If no filter is configured to match the events Event Type. then the global filter
 *     action is applied.
 * - Global default filter action, FilterActions.DENY, is the default in code.  Events
 *     must match a rule as specified in agent configuration or event is supressed,
 *     otherwise known as White Listing.
 * - Once an event filter is defined in configuration the default, white vs. black list,
 *     may be selected.  Any events with no matching filter rule, or unspecified,
 *     the default is FilterActions.DENY, black list.
 * </pre>
 * @author Milton Smith
 *
 */
public class JVMXRayFilterList {

	ArrayList<IJVMXRayFilterRule> list = new ArrayList<IJVMXRayFilterRule>();

	/**
	 * Search for the appropriate event filter rule.
	 * @param event Event in String form.
	 * @return Filter rule for handing event.  JVMXRayFilterRule.isMatch() returns true.
	 */
	public IJVMXRayFilterRule getFilterRuleByEvent(String event) {
		IJVMXRayFilterRule result = null;
		Iterator<IJVMXRayFilterRule> i = listIterator();
		while( i.hasNext() ) {
			IJVMXRayFilterRule r = i.next();
			FilterActions fa = r.isMatch( event );
			// If filter returns FilterActions.NEUTRAL we try another filter.
			if(fa!=null && (fa.equals(FilterActions.ALLOW)||fa.equals(FilterActions.DENY)) ) {
				result = r;
				break;
			}
		}
		return result;
	}

	/**
	 * Add a filter to the list of filters.
	 * @param r Filter rule to add
	 */
	public void add( IJVMXRayFilterRule r ) {
		list.add( r );
	}

	/**
	 * Return an ordered (FIFO) list of filter rules.  These are
	 * the filters as specified in agent configuration.
	 * @return Filter rules.
	 */
	private Iterator<IJVMXRayFilterRule> listIterator() {
		return list.listIterator();
	}

}
