# ***********************************************************************************
# ***********************************************************************************
# ***********************************************************************************
# JVMXRay Client Configuration
# ***********************************************************************************
# ***********************************************************************************
# ***********************************************************************************
#

# Note(s):
# 1) Variable substitution.  Variables may be substituted in the key or value
#      of Java properties or Shell Environment variables.  Variable type "sys"
#      refers to System Properties while type "env" refers to variables in
#      the Shell Environment.  Keep in mind, environment variables set by the
#      operating system are operating system dependent.  Following is the format
#      and an example. 
#        ${sys|env:variable}
#      where
#        sys or env is the system (e.g., user.home) or 
#        environment (e.g., home) variable to resolve.
#      example
#        In this example ${sys:user.home} is replaced by /Users/milton
#          ${sys:user.home}/dirA/file.txt
#      becomes
#        /Users/milton/dirA/file.txt
#      A few design considerations:
#        - Use caution to ensure variables are the correct type, 
#          spelled correctly, an respect case sensitivity.
#        - Valid Java or shell environment variable may be specified.
#        - Variables may appear positioned anywhere in the
#          key or value.
#        - Nesting variables, including another variable within the
#          brackets (e.g., {}) of the another variable is untested.
#

#
# Variables for unit testing the resolver.  Ok, to delete this section for
# your deployment.  Although, does not hurt anything to leave it.  No
# performance impact, etc.  Note: test4 will not be applied since the
# tag is not valid.  Whitespace in the tag is not supported.
#jvmxray.event.nullsecuritymanager.test1=${sys:user.home}
#jvmxray.event.nullsecuritymanager.test2=${sys:user.home}\abc
#jvmxray.event.nullsecuritymanager.test3=\abc\${sys:user.home}
#jvmxray.event.nullsecuritymanager.test4=$ {sys:   user.home }
#jvmxray.event.nullsecuritymanager.test5=${sys:user.home}/${sys:user.country}/

#
# jvmxray base directory.  Construct system independent pathing.
#
jvmxray.event.nullsecuritymanager.directory=${sys:user.home}${sys:file.separator}

#
# jvmxray identity file. Identity file is stored at 
# ${sys:user.home}/jvmxrayinstanceid.properties
#
jvmxray.event.nullsecuritymanager.id.file=jvmxrayinstanceid.properties

#
# Webhook target
# HTTP/S end-point where JVMXRay JSON events sent.  If the property is not
# present, no attempt is made to send.
#
# To test the server without logging events sent to the following end-point,
# http://localhost:9123/api/echo/
# to log event send data to the following end-point,
# http://localhost:9123/api/event/
#
# TODOMS: Need to move to https and include provisions for client/server auth.
#
jvmxray.event.webhook.target=http://localhost:9123/api/event/

#
# jvmxray spool directory.  jvmxray writes events to {java.home}/jvmxrayspool.db unless
# you specify another target. Make sure agents and server have
# read and write permissions.
#
jvmxray.event.nullsecuritymanager.spool.directory=${sys:user.home}${sys:file.separator}

#
# JVMXRay local database.  SQLite database for testing.  Useful for unit testing or
# isolated tests.  Keep commented out for normal production work.
#
#jvmxray.event.nullsecuritymanager.spool.filename=jvmxrayclientspool.db

#
# Maximum wait time in ms during initialization.  This is a design consideration for
# running JVMXRay in containers and directly via unit tests. The delay is required due
# to the SecurityManager architecture, not all JVM services are available immediately.
# Services like like JDBC, JMX, and classloaders will throw exceptions if used
# prior to complete JVM initialization.  Once jvmxray is fully initialized, the
# thread completes and system is available for event processing.  Any events
# occurring prior to jvmxray initialization are lost.  Typically, these events
# are generated internally by the virtual machine.  It's thought a maximum
# time of 45 seconds is good enough for most containers/app servers but adjust
# as necessary.
#
jvmxray.event.nullsecuritymanager.server.maxwait.initialization=45000

#
# >>>> ASSIGN THIS <<<<
# jvmxray event spool limit.  Maximum size of the spool in records.  jvmxray
# writes events to the spool. Adaptors running as different process (from the nullsecuritymanager)
# will process events from the spool.  If the adaptors go off line, the spool size will increase.
# If the spool limit is exceeded, jvmxray will remove the oldest events first (lowest numbered).  Any
# events over the limit may be lost.  The value of 100k is the default but depends upon how busy
# your server is and the number of events you log, recycle or outage time for adaptors, etc.
jvmxray.event.nullsecuritymanager.spool.limit=100000

#
# Filter Configuration
#
# jvmxray.filterN.stacktrace options, 
#   NONE,        No trace data, the default.
#   LIMITED,     Include limited trace data.  Ordered list of classes.
#   SOURCEPATH,  Includes LIMITED but adds class source path information. For example,
#                  jar:file:/Users/milton/.m2/repository/junit/junit/4.12/
#                  junit-4.12.jar!/org/junit/internal/runners/model/ReflectiveCallable.class
#   FULL        Stacktrace information, class, method, line number.
# ---
#
#jvmxray.filterN.events= <event1>, <event2>, ...
#jvmxray.filterN.class= <fully qualified class name>
#jvmxray.filterN.stacktrace= <NONE> | <LIMITED> | <SOURCEPATH | FULL
#jvmxray.filterN.default= <ALLOW> | <DENY>

#
# Capture file CUD operations for all files
#
jvmxray.filter1.events=FILE_WRITE, FILE_DELETE
jvmxray.filter1.class=org.owasp.jvmxray.filters.NullFilter
jvmxray.filter1.stacktrace=NONE
jvmxray.filter1.default=ALLOW

#
# Capture socket access.
#
jvmxray.filter2.events=SOCKET_ACCEPT, SOCKET_CONNECT, SOCKET_LISTEN, SOCKET_CONNECT_WITH_CONTEXT, SOCKET_MULTICAST, SOCKET_MULTICAST_WITH_TTL
jvmxray.filter2.class=org.owasp.jvmxray.filters.NullFilter
jvmxray.filter2.stacktrace=NONE
jvmxray.filter2.default=ALLOW

#
# Capture executed process
#
jvmxray.filter3.events=FILE_EXECUTE
jvmxray.filter3.class=org.owasp.jvmxray.filters.NullFilter
jvmxray.filter3.stacktrace=NONE
jvmxray.filter3.default=ALLOW

#
# Capture all package access except standard JVM packages
#
jvmxray.filter4.events=PACKAGE_ACCESS, PACKAGE_DEFINE
jvmxray.filter4.class=org.owasp.jvmxray.filters.StringFilter
jvmxray.filter4.stacktrace=NONE
jvmxray.filter4.default=DENY
# testing #  jvmxray.filter4.matches1=.*junit.*
jvmxray.filter4.startswith1=java.
jvmxray.filter4.startswith2=javax.
jvmxray.filter4.startswith3=org.ietf.jgss
jvmxray.filter4.startswith4=org.omg
jvmxray.filter4.startswith5=org.wc3.dom
jvmxray.filter4.startswith6=org.xml.sax
jvmxray.filter4.startswith7=sun.

#
# Capture file read operations to certain files.
# More info on patterns, https://bit.ly/2Soqfm7
#
jvmxray.filter5.events=FILE_READ, FILE_READ_WITH_FILEDESCRIPTOR, FILE_READ_WITH_CONTEXT
jvmxray.filter5.class=org.owasp.jvmxray.filters.StringFilter
jvmxray.filter5.stacktrace=NONE
jvmxray.filter5.default=ALLOW
# Field search criteria searches on the first field by default, 0.  Number of fields
# available to search depends on record type. Most often the first is what you want
# to search.  However, there may be reasons to search other fields like searching
# stacktraces for example.  More information on searching to come.
jvmxray.filter5.matches1.0=.*certs$

#
# Capture permission checks
#
jvmxray.filter6.events=PERMISSION
jvmxray.filter6.class=org.owasp.jvmxray.filters.NullFilter
jvmxray.filter6.stacktrace=NONE
jvmxray.filter6.default=ALLOW

#
# Application & Environment Monitoring
# Use the property monitor to identify changes to application
# properties and environment settings.  Events are fired based
# on criteria.
#
# Standard pre-assigned JDK properties
#
#jvmxray.filter7.events=MAPPED_CONTEXT
#jvmxray.filter7.class=MappedScalarValue
#jvmxray.filter7.stacktrace=NONE
#jvmxray.filter7.onchange1=sys:java.runtime.version
#jvmxray.filter7.onchange2=sys:java.version
#jvmxray.filter7.onchange3=sys:os.version
#jvmxray.filter7.onchange4=sys:java.vm.version
#jvmxray.filter7.onchange5=sys:java.class.path
#jvmxray.filter7.onchange6=sys:java.io.tmpdir
#jvmxray.filter7.onchange7=sys:java.home
#jvmxray.filter7.onchange8=sys:user.language
#jvmxray.filter7.onchange9=sys:http.nonProxyHosts
#jvmxray.filter7.onchange10=sys:socksNonProxyHosts
#
# Standard pre-assigned shell properties
#
#jvmxray.filter7.onchange11=env:HOME
#jvmxray.filter7.onchange12=env:PATH
#jvmxray.filter7.onchange13=env:SHELL
#jvmxray.filter7.onchange14=env:USER
#jvmxray.filter7.onchange15=env:TMPDIR
#jvmxray.filter7.onchange16=env:HOME

# 
# User Events
#
# Capture free app disk space available.
#
#jvmxray.filter8.events=USER_TYPE
#jvmxray.filter8.class=org.owasp.jvmxray.userproperty.AppDisk
#jvmxray.filter8.stacktrace=NONE
#jvmxray.filter8.ttl1.60000=org.owasp.jvmxray.userproperty.appdiskfree
#jvmxray.filter8.ttl2.60000=org.owasp.jvmxray.userproperty.appdisktotal
#jvmxray.filter8.ttl3.60000=org.owasp.jvmxray.userproperty.appdiskinuse
#
# Capture file handles
#
#jvmxray.filter9.events=USER_TYPE
#jvmxray.filter9.class=org.owasp.jvmxray.userproperty.Filez
#jvmxray.filter9.stacktrace=NONE
#jvmxray.filter9.ttl4.60000=org.owasp.jvmxray.userproperty.filehandlecount
#
# Capture active web app user
#
#jvmxray.filter10.events=USER_TYPE
#jvmxray.filter10.class=org.owasp.jvmxray.userproperty.AppUser
#jvmxray.filter10.stacktrace=NONE
#jvmxray.filter10.onchange1=org.owasp.jvmxray.userproperty.httpsessionid
#jvmxray.filter10.onchange2=org.owasp.jvmxray.userproperty.userid

