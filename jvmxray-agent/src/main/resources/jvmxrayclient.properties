# ***********************************************************************************
# ***********************************************************************************
# ***********************************************************************************
# JVMXRay Client Configuration
# ***********************************************************************************
# ***********************************************************************************
# ***********************************************************************************
#

#
# jvmxray base directory and logging targets.
#
jvmxray.agent.base.directory=/Users/milton/
jvmxray.agent.status.filename=jvmxraystatus.log
jvmxray.agent.event.filename=jvmxrayevent.log

#
# jvmxray identity file. Identity file is stored at 
# {jvmxray.agent.base.directory}/jvmxrayinstanceid.properties
#
jvmxray.agent.id.file=jvmxrayinstanceid.properties

#
# HTTP/S REST server end-point(s).  Use secure target in production.
#
jvmxray.webhook.event.endpoint=http://localhost:9123/api/event/

#
# JMS processor config.
#
jvmxray.agent.processor.jms.topicname=topic0
jvmxray.agent.processor.jms.connectionfactoryname=jvmxrayConnectionFactory
jvmxray.agent.processor.jms.broker.url=tcp://localhost:61616

#
# Event processors.  Event processors implement the action(s) performed
#    events that match against a criteria or unmatched events (which
#    are processed by default).
#
# nativeserverxportprocessor
#   The nativeserverxportprocessor processor sends events to a REST server.
#   nativeserverxportprocessor processor sends events to a remote centralized
#   server.  Useful for collecting events across application
#   agents in the cloud.
#
# nativelogmessagetofileprocessor
#   The nativelogmessagetofileprocessor processor log events locally on the server.
#   Useful for tuning, diagnostics, single-server operation, etc.
#
# logbackmessageprocessor
#   The logbackmessageprocessor logs events using logback.  Adjust the
#   configuration in the usual way (see logback project).
#
# Load/run one or more event processors.  Keep in mind, each event processor added
# increases overall message processing time.
#
#jvmxray.event.processor.classname1=org.jvmxray.processors.nativeserverxportprocessor
jvmxray.event.processor.classname2=org.jvmxray.processors.nativelogmessagetofileprocessor
#jvmxray.event.processor.classname3=org.jvmxray.processors.nativeconsoleprocessor
#jvmxray.event.processor.classname5=org.jvmxray.processors.nativejmsprocessor

#
# INFORMATION: The default is to log/process all events by default with no
#              stacktrace information.  As such, it's only necessary to match
#              events you wish to suppress(DENY) or if you want additional
#              metadata like stacktrace information included.
#

#
# REQUIRED FILTER: Suppress JVMXRay log messages.  This rule should be first
#    and never deleted. The reason is that JVMXRay writes logs, which generate
#    events, that in tern generate new events, a circular dependency results
#    that will keep your logs churning.  This could be blocked in code but
#    seems a little safer to maintain the property (blocked) for present.
#
jvmxray.filter10.events=FILE_WRITE
jvmxray.filter10.class=org.jvmxray.filters.StringFilter
jvmxray.filter10.stacktrace=NONE
jvmxray.filter10.default=DENY
# Field search criteria searches on the first field by default, 0.  Number of fields
# available to search depends on record type but there are 3 max: param1, param2, param3,
# and based on a zero index. A valid range for the index is, 0-2, inclusive.  Most often the first
# field or unspecified (omitting) the is the field to search.  However, other event types
# like PERMISSION make more use the field data.  Another reason would be to search
# stacktrace data for example.  More information on searching to come.
jvmxray.filter10.matches1.0=.*jvmxrayevent.log$
jvmxray.filter10.matches2.0=.*jvmxraystatus.log$

#
# Suppress standard JVM messages.  If you desire to track JVM activity,
#    it's recommended you develop additional, more specific, filters to
#    enable select monitoring of areas of interest.  Include your
#    more specific rule prior to this rule (<filter20) to this general
#    since rules are processed in order.
#
jvmxray.filter20.events=PACKAGE_ACCESS, PACKAGE_DEFINE
jvmxray.filter20.class=org.jvmxray.filters.StringFilter
jvmxray.filter20.stacktrace=NONE
jvmxray.filter20.default=DENY
jvmxray.filter20.startswith1.0=java.
jvmxray.filter20.startswith2.0=javax.
jvmxray.filter20.startswith3.0=org.ietf.jgss
jvmxray.filter20.startswith4.0=org.omg
jvmxray.filter20.startswith5.0=org.wc3.dom
jvmxray.filter20.startswith6.0=org.xml.sax
jvmxray.filter20.startswith7.0=sun.
jvmxray.filter20.startswith8.0=jdk.
jvmxray.filter20.startswith9.0=compressionFilters

#
# Dump some interesting messages for testing purposes.
#
jvmxray.filter30.events=SOCKET_ACCEPT, SOCKET_CONNECT, \
  SOCKET_CONNECT_WITH_CONTEXT, SOCKET_LISTEN, SOCKET_MULTICAST, \
  FILE_DELETE, FILE_EXECUTE, FILE_WRITE_WITH_FILEDESCRIPTOR, \
  FILE_WRITE, EXIT, LINK
jvmxray.filter30.class=org.jvmxray.filters.NullFilter
jvmxray.filter30.stacktrace=FULL
jvmxray.filter30.default=ALLOW

#
# Default event handler if more specific handler undefined.  This is a white-listing
# approach, all events are processed with full stacktrace information.  If you want
# to handle your messages in a special way add your handlers before this handler.
#
jvmxray.filter200.events=ACCESS_SECURITY, ACCESS_THREAD, ACCESS_THREADGROUP, CLASSLOADER_CREATE, \
  EXIT, FACTORY, FILE_DELETE, FILE_EXECUTE, FILE_READ, FILE_READ_WITH_CONTEXT, FILE_READ_WITH_FILEDESCRIPTOR, \
  FILE_WRITE, FILE_WRITE_WITH_FILEDESCRIPTOR, LINK, PACKAGE_ACCESS, PACKAGE_DEFINE, PERMISSION, \
  PERMISSION_WITH_CONTEXT, PRINT, PROPERTIES_ANY, PROPERTIES_NAMED, SOCKET_ACCEPT, SOCKET_CONNECT, \
  SOCKET_CONNECT_WITH_CONTEXT, SOCKET_LISTEN, SOCKET_MULTICAST, SOCKET_MULTICAST_WITH_TTL
jvmxray.filter200.class=org.jvmxray.filters.NullFilter
jvmxray.filter200.stacktrace=NONE
jvmxray.filter200.default=ALLOW