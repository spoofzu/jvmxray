# ***********************************************************************************
# ***********************************************************************************
# ***********************************************************************************
# JVMXRay Configuration
# ***********************************************************************************
# ***********************************************************************************
# ***********************************************************************************
#

# Note(s):
# 1) Variable substitution.  Variables may be substituted in the key or value
#      of Java properties or Shell Environment variables.  Variable type "sys"
#      refers to System Properties while type "env" refers to variables in
#      the Shell Environment.  Keep in mind, environment variables set by the
#      operating system are operating system dependent.  Following is the format
#      and an example. 
#        ${sys|env:variable}
#      where
#        sys or env is the system (e.g., user.home) or 
#        environment (e.g., home) variable to resolve.
#      example
#        In this example ${sys:user.home} is replaced by /Users/milton
#          ${sys:user.home}/dirA/file.txt
#      becomes
#        /Users/milton/dirA/file.txt
#      A few design considerations:
#        - Use caution to ensure variables are the correct type, 
#          spelled correctly, an respect case sensitivity.
#        - Valid Java or shell environment variable may be specified.
#        - Variables may appear positioned anywhere in the
#          key or value.
#        - Nesting variables, including another variable within the
#          brackets (e.g., {}) of the another variable is untested.
#

#
# Variables for unit testing the resolver.  Ok, to delete this section for
# your deployment.  Although, does not hurt anything to leave it.  No
# performance impact, etc.  Note: test4 will not be applied since the
# tag is not valid.  Whitespace in the tag is not supported.
#jvmxray.event.nullsecuritymanager.test1=${sys:user.home}
#jvmxray.event.nullsecuritymanager.test2=${sys:user.home}\abc
#jvmxray.event.nullsecuritymanager.test3=\abc\${sys:user.home}
#jvmxray.event.nullsecuritymanager.test4=$ {sys:   user.home }
#jvmxray.event.nullsecuritymanager.test5=${sys:user.home}/${sys:user.country}//

#
# jvmxray base directory.  On OSX user.home resolves to
# /Users/milton/.  
jvmxray.event.nullsecuritymanager.directory=${sys:user.home}${sys:file.separator}

#
# jvmxray identity file. Identity file is stored at 
# ${sys:user.home}/jvmxrayinstanceid.properties
jvmxray.event.nullsecuritymanager.id.file=jvmxrayinstanceid.properties

# jvmxray data scraper. Mine/match log data and system properties.  For logs,
# output from System.out and System.err are redirected and evaluated for a
# match.  Properties must be an exact match.  Updated data can be send
# at regular intervals or when changed.
# Log even: one time only, user specified interval, update on change.
# (TODOMS: FUTURE FEATURE, NOT SUPPORTED YET)
#jvmxray.event.nullsecuritymanager.source.mine.property1=system.property.name
#jvmxray.event.nullsecuritymanager.source.mine.log1=.*pwd.* | .*pass.* | .*password.*

#
# Aggregation adaptor update interval.  This is the interval in seconds to update the aggregation file
# identified by, jvmxray.adaptor.jvmxrayeventaggregator.filename
# (DEPRECATED)
# jvmxray.adaptor.jvmxrayeventaggregator.fileupdateinterval=30

#
# Webhook target
# HTTP/S end-point where JVMXRay JSON events sent.
#
jvmxray.event.webhook.target=http://localhost:9123/api/echo/

#
# Filter Configuration
#
# jvmxray.filterN.stacktrace options, 
#   NONE,        No trace data, the default.
#   LIMITED,     Include limited trace data.  Ordered list of classes.
#   SOURCEPATH,  Includes LIMITED but adds class source path information. For example,
#                  jar:file:/Users/milton/.m2/repository/junit/junit/4.12/
#                  junit-4.12.jar!/org/junit/internal/runners/model/ReflectiveCallable.class
#   FULL        Stacktrace information, class, method, line number.
# ---
#
#jvmxray.filterN.events= <event1>, <event2>, ...
#jvmxray.filterN.class= <fully qualified class name>
#jvmxray.filterN.stacktrace= <NONE> | <LIMITED> | <SOURCEPATH | FULL
#jvmxray.filterN.default= <ALLOW> | <DENY>

#
# Capture file CUD operations for all files
jvmxray.filter1.events=FILE_WRITE, FILE_DELETE
jvmxray.filter1.class=org.owasp.jvmxray.filters.NullFilter
jvmxray.filter1.stacktrace=NONE
jvmxray.filter1.default=ALLOW

#
# Capture socket access.  
jvmxray.filter2.events=SOCKET_ACCEPT, SOCKET_CONNECT, SOCKET_LISTEN, SOCKET_CONNECT_WITH_CONTEXT, SOCKET_MULTICAST, SOCKET_MULTICAST_WITH_TTL
jvmxray.filter2.class=org.owasp.jvmxray.filters.NullFilter
jvmxray.filter2.stacktrace=NONE
jvmxray.filter2.default=ALLOW

#
# Capture executed process
jvmxray.filter3.events=FILE_EXECUTE
jvmxray.filter3.class=org.owasp.jvmxray.filters.NullFilter
jvmxray.filter3.stacktrace=NONE
jvmxray.filter3.default=ALLOW

#
# Capture all package access except standard JVM packages
jvmxray.filter4.events=PACKAGE_ACCESS, PACKAGE_DEFINE
jvmxray.filter4.class=org.owasp.jvmxray.filters.StringFilter
jvmxray.filter4.stacktrace=NONE
jvmxray.filter4.default=DENY
# testing #  jvmxray.filter4.matches1=.*junit.*
jvmxray.filter4.startswith1=java.
jvmxray.filter4.startswith2=javax.
jvmxray.filter4.startswith3=org.ietf.jgss
jvmxray.filter4.startswith4=org.omg
jvmxray.filter4.startswith5=org.wc3.dom
jvmxray.filter4.startswith6=org.xml.sax
jvmxray.filter4.startswith7=sun.

#
# Capture file read operations to certain files.
# More info on patterns, https://bit.ly/2Soqfm7
jvmxray.filter5.events=FILE_READ, FILE_READ_WITH_FILEDESCRIPTOR, FILE_READ_WITH_CONTEXT
jvmxray.filter5.class=org.owasp.jvmxray.filters.StringFilter
jvmxray.filter5.stacktrace=NONE
jvmxray.filter5.default=ALLOW
# Field search criteria searches on the first field by default, 0.  Number of fields
# available to search depends on record type. Most often the first is what you want
# to search.  However, there may be reasons to search other fields like searching
# stacktraces for example.  More information on searching to come.
jvmxray.filter5.matches1.0=.*certs$

#
# Capture permission checks
jvmxray.filter6.events=PERMISSION
jvmxray.filter6.class=org.owasp.jvmxray.filters.NullFilter
jvmxray.filter6.stacktrace=NONE
jvmxray.filter6.default=ALLOW