# ***********************************************************************************
# ***********************************************************************************
# ***********************************************************************************
# JVMXRay Server Configuration
# ***********************************************************************************
# ***********************************************************************************
# ***********************************************************************************
#
# Note(s):
# Variable substitution is permitted in the server configuration.  See configuration
# notes in jvmxrayclient.properties
#

#
# jvmxray base directory.  Construct system independent pathing.
jvmxray.event.nullsecuritymanager.directory=${sys:user.home}${sys:file.separator}

#
# Webhook target
# HTTP/S end-point where JVMXRay JSON events sent.  If the property is not
# present, no attempt is made to send.
# TODOMS: Need to move to https and include provisions for client/server auth.
#
#jvmxray.event.webhook.target=http://localhost:9123/api/event/

#
# jvmxray spool directory.  jvmxray writes events to {java.home}/jvmxrayspool.db unless
# you specify another target. Make sure the NullSecurityManager and Adaptors have
# read and write permissions.
jvmxray.event.nullsecuritymanager.spool.directory=/Users/milton/

#
# jvmxray spool database.  SQLite database for caching events.  Adaptors
# process events from this cache.  Ok, to start, stop, restart adaptors as
# necessary.  Events will fill the cache, when adaptor services are restored
# the cache backlog is processed, processed events are removed, and size of
# cache will shrink.  Note: it's sometimes the case that the file size does
# not immediately reflect the fact that records have been removed.  I suspect
# this is a db optimization behavior.
jvmxray.event.nullsecuritymanager.spool.filename=jvmxrayserverspool.db

#
# Maximum wait time in ms during initialization.  This is a design consideration for
# running JVMXRay in containers and directly via unit tests. The delay is required due
# to the SecurityManager architecture, not all JVM services are available immediately.
# Services like like JDBC, JMX, and classloaders will throw exceptions if used
# prior to complete JVM initialization.  Once jvmxray is fully initialized, the
# thread completes and system is available for event processing.  Any events
# occurring prior to jvmxray initialization are lost.  Typically, these events
# are generated internally by the virtual machine.  It's thought a maximum
# time of 45 seconds is good enough for most containers/app servers but adjust
# as necessary.
jvmxray.event.nullsecuritymanager.server.maxwait.initialization=45000

#
# >>>> ASSIGN THIS <<<<
# jvmxray event spool limit.  Maximum size of the spool in records.  jvmxray
# writes events to the spool. Adaptors running as different process (from the nullsecuritymanager)
# will process events from the spool.  If the adaptors go off line, the spool size will increase.
# If the spool limit is exceeded, jvmxray will remove the oldest events first (lowest numbered).  Any
# events over the limit may be lost.  The value of 100k is the default but depends upon how busy
# your server is and the number of events you log, recycle or outage time for adaptors, etc.
jvmxray.event.nullsecuritymanager.spool.limit=100000
